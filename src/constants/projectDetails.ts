export const projectDetails = [
  {
    title: "씨네톡 (Cinetalk)",
    description:
      "씨네톡 (Cinetalk)은 영화에 대한 자세한 정보와 사용자 리뷰를 제공하는 서비스입니다. 영화에 대한 키워드, 리뷰로 유저에게 영화를 추천합니다.",
    logoSrc: "/images/logos/cinetalk.png",
    imgSrc: "/images/projects/cinetalk.png",
    gitHub: "https://github.com/Devinix00/cinetalk-front",
    siteUrl: "https://cinetalk-front-dev.vercel.app",
    techStacks: [
      "Next.Js (App router)",
      "Typescript",
      "Tailwind CSS",
      "React-Query",
      "Zustand",
    ],
    myContributions: [
      "카카오, 네이버 소셜 로그인",
      "상세 페이지 반응형 퍼블리싱",
      "영화 리뷰 등록, 수정, 삭제, 좋아요",
      "영화 리뷰 무한 스크롤 조회",
      "영화 평점 등록",
      "영화 찜하기",
      "영화 키워드 조회, 작성",
      "영화 포스터 색상 추출",
    ],
    myContributionsDetail: [
      "리다이렉트 페이지의 쿼리스트링에 포함된 토큰 값을 백엔드 서버로 전송합니다. 백엔드 서버는 응답으로 access token을 응답 헤더에, refresh token을 httpOnly 쿠키에 저장하여 반환합니다. 이 토큰들로 로그인을 구현하였습니다.",
      "Tailwind CSS를 활용하여 상세 페이지의 모든 반응형 UI를 개발하였습니다. 조건부 스타일링에는 clsx 라이브러리를 사용하여 코드의 가독성과 유지보수성을 향상시키려 노력하였습니다.",
      "React-Query의 useMutation 훅을 이용해 로딩 스피너를 처리하고, 쿼리 무효화를 통해 데이터를 최신 상태로 유지하였습니다. 좋아요와 싫어요 기능에는 Optimistic Update를 적용하여 사용자 경험을 개선하였습니다.",
      "React-Query의 useInfiniteQuery 훅을 사용하여 간편하고 효율적인 무한 스크롤 기능을 구현하였습니다.",
      "별 모양의 아이콘을 5개 렌더링하고 각 별의 index에 따라 hover 영역을 설정하여 별의 색을 채워 별점을 구분하였습니다. 빈 별은 0점, 반만 채워진 별은 0.5점, 전부 채워진 별은 1점으로 표시되도록 하였습니다.",
      "React-Query의 useMutation 훅을 이용하여 구현하였고, Optimistic Update를 적용하여 사용자 경험을 개선하였습니다",
      "유저는 영화에 관련된 키워드를 5자 내로 작성할 수 있습니다. 최신 키워드와 좋아요가 가장 많은 26개의 키워드를 키워드 조회의 응답으로 받으며, 좋아요 순위를 매겨서 폰트 사이즈와 색상을 다르게 적용하였습니다.",
      "상세 페이지의 영화 배너 아래 키워드 바 영역에 대해서는 포스터에서 가장 많이 사용된 색상 두 가지를 추출하여 그라데이션 처리를 하였습니다. 이 작업에는 color-thief 라이브러리를 활용하였습니다.",
    ],
  },
  {
    title: "오늘의 운세",
    description:
      "유저의 생년월일, MBTI를 이용해 운세를 제공하는 모바일 앱입니다. ChatGPT API를 이용하여 유저의 운세 데이터를 받아오며, 유저들에게 오늘의 한마디를 푸시 메세지로 제공합니다.",
    logoSrc: "/images/logos/today_s_horoscope.png",
    imgSrc: "/images/projects/today_s_horoscope.png",
    gitHub: "https://github.com/Devinix00/today-s-horoscope",
    siteUrl: "",
    techStacks: [
      "Turborepo",
      "React-Native (expo)",
      "Firebase Cloud Messaging (FCM)",
      "React",
      "Next.Js (App router) (admin)",
      "Typescript",
      "Tailwind CSS (admin)",
      "SCSS",
      "React-Query",
      "Zustand",
    ],
    myContributions: [
      "Turborepo를 이용하여 멀티레포 구성",
      "React-Native Webview 구성",
      "Android 물리적 뒤로가기 구현",
      "푸시 메세지 구현",
      "어드민 페이지 개발",
    ],
    myContributionsDetail: [
      "웹뷰로 구성되는 애플리케이션의 특성을 고려하여, 기존의 멀티 레포 형식 대신 하나의 레포지토리에서 여러 프로젝트를 관리하는 것이 더 효율적이라고 판단하였습니다. 이를 위해 Vercel의 Turborepo를 사용하여 모노레포를 구성하였습니다.",
      "react-native-webview 라이브러리를 사용하여 웹뷰 애플리케이션을 구성하였습니다. 네트워크 연결이 없는 환경에서도 대응할 수 있도록 @react-native-community/netinfo 라이브러리를 활용하였습니다.",
      "웹뷰 애플리케이션은 안드로이드 환경에서 물리적 뒤로가기 버튼이 작동하지 않기 때문에 이에 대한 대응이 필요했습니다. 뒤로가기 함수를 정의하고, useEffect를 이용하여 물리적 뒤로가기 이벤트에 등록하였습니다. 웹뷰 내비게이션 상태 변경 시 호출되는 핸들러(url 갱신 함수)를 정의하여 Webview 컴포넌트의 onNavigationStateChange props로 전달하였고, 메인 화면에서는 뒤로가기 버튼을 눌렀을 때 토스트를 띄우고, 2초 내로 한 번 더 누를 시 애플리케이션을 종료하는 로직을 구현하였습니다.",
      "Firebase Cloud Messaging(FCM)과 @react-native-firebase/messaging 라이브러리를 사용하여 푸시 메시지를 구현하였습니다. 파이어베이스 콘솔에서 푸시 메시지를 보내는 대신, DB에 저장된 '오늘의 한마디'를 푸시 메시지로 받아야 했기 때문에, 디바이스 토큰을 서버로 전송하는 API 통신을 추가로 구현하였습니다.",
      "오늘의 운세 애플리케이션은 ChatGPT API를 통해 운세 데이터를 받아옵니다. 이를 위해 어드민 페이지가 필요하였습니다. 어드민페이지에서는 프롬프트를 관리하고 프롬프트 히스토리를 조회할 수 있으며, 푸시 메시지의 발송 기간을 설정하고, 특정 일자나 기간 동안의 운세 데이터를 한 번에 생성할 수 있습니다. 또한 프롬프트를 통해 미리 생성된 콘텐츠는 날짜별 페이지네이션 형식으로 구현되어있어 손쉽게 조회, 관리 및 수정이 가능합니다.",
    ],
  },
  {
    title: "모두의 텃밭",
    description:
      "전국의 텃밭을 조회, 등록하고, 분양하는 웹 서비스입니다. 커뮤니티, 지도, 채팅 기능이 포함되어있습니다.",
    logoSrc: "/images/logos/everyone_s_garden.png",
    imgSrc: "/images/projects/everyone_s_garden.png",
    gitHub: "https://github.com/Devinix00/everyone-s-garden-front",
    siteUrl: "https://everyonesgarden-v2.vercel.app",
    techStacks: [
      "React",
      "Typescript",
      "Chakra UI",
      "Axios",
      "React-Query",
      "Zustand",
    ],
    myContributions: [
      "카카오, 네이버 소셜 로그인",
      "지역 검색 (네이버 지도 위치 이동)",
      "네이버 지도 기반 내 위치 (geolocation)",
      "위도와 경도를 조작하여 텃밭 조회 (마커 클러스터링 적용)",
      "사이드 바 텃밭 무한 스크롤 조회",
      "텃밭 신고, 찜하기, 신청하기",
    ],
    myContributionsDetail: [
      "리다이렉트 페이지의 쿼리스트링에 포함된 토큰 값을 백엔드 서버로 전송합니다. 백엔드 서버는 응답으로 access token을 응답 body에, refresh token을 httpOnly 쿠키에 저장하여 반환합니다. access token의 만료기간이 10분이기 때문에 애플리케이션의 진입점에서 setInterval을 사용하여 9분마다 토큰 갱신 요청을 보냈습니다. 또한, 페이지가 새로고침되거나 시간이 지난 뒤에 다시 접속했을 때도 로그인 상태가 유지되도록 하기 위해 Zustand-Persist를 사용하여 로그인 전역 상태를 관리했습니다. 로그인 상태가 true일 경우 자동으로 토큰 갱신 요청을 보내어 자동 로그인을 구현하였습니다.",
      "지도 페이지에서 사용자가 지역을 검색하여 해당 지역의 텃밭 정보를 쉽게 조회할 수 있도록 지역 검색 기능을 구현했습니다. input의 value가 변경될 때마다 요청을 보내는 대신, 과도한 요청을 방지하기 위해 debounce 기법을 적용했습니다.",
      "유저가 지도 페이지에 진입할 때 geolocation을 통해 가져온 유저의 위도, 경도를 기반으로 네이버 지도를 렌더링합니다. 또한, 현재 사용자의 위치 정보를 마커로 표시합니다.",
      "지도의 위치가 바뀔때마다 지도의 가장자리 네 부분의 위도, 경도를 쿼리스트링에 포함시켜 서버에 요청을 보내 지도에서 보이는 영역의 텃밭 데이터를 받습니다. 이 텃밭 데이터는 MarkerClustering 객체를 이용하여 마커 클러스터링을 적용하였습니다.",
      "지도의 가장자리 위도와 경도를 통해 조회하는 텃밭들을 사이드바에서 무한 스크롤의 형태로 구현하였습니다. 이를 위해 React-Query의 useInfiniteQuery를 활용하였습니다.",
      "React-Query의 useMutation 훅을 이용해 로딩 스피너를 처리하였습니다. 신청하기와 같은 경우에는 별 다른 서버의 요청 없이 href='tel:'을 이용하여 모바일 환경에서 텃밭을 등록한 유저의 번호로 전화를 걸 수 있게 구현하였으며, 채팅하기 버튼을 누르면 채팅방으로 이동하게 됩니다.",
    ],
  },
  {
    title: "저메추 (DMR)",
    description:
      "유저들에게 저녁 메뉴를 추천해주는 서비스입니다. 유저는 자신의 음식 취향에 대한 질문에 답을하고, 서비스는 이를 토대로 유저에게 저녁 메뉴를 추천합니다.",
    logoSrc: "/images/logos/DMR.png",
    gitHub: "https://github.com/Devinix00/Dinner-Menu-Recommendation",
    siteUrl: "",
    techStacks: [
      "React",
      "Typescript",
      "SCSS",
      "Axios",
      "React-Query",
      "Zustand",
    ],
    myContributionsDetail: ["1", "2", "3", "4", "5", "6"],
  },
];
